name: Watch Upstream Commits

on:
  schedule:
    - cron: '43 1 * * *'
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  check-upstream-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Get latest commit SHA from neodrama/github-drama
        id: get_commit
        run: |
          LATEST_SHA=$(curl -s https://api.github.com/repos/neodrama/github-drama/commits?per_page=1 | jq -r '.[0].sha // empty')
          echo "latest_sha=$LATEST_SHA" >> $GITHUB_OUTPUT

      - name: Get last seen SHA from tracker issue
        id: get_last_sha
        uses: actions/github-script@v7
        with:
          script: |
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'Upstream Commit Tracker',
              per_page: 1
            });
            if (issues.length > 0) {
              const tracker = issues[0];
              const match = tracker.body && tracker.body.match(/Last seen SHA: ([a-f0-9]+)/);
              const lastSha = match ? match[1] : '';
              core.setOutput('last_sha', lastSha);
              core.setOutput('issue_number', tracker.number.toString());
            } else {
              core.setOutput('last_sha', '');
              core.setOutput('issue_number', '');
            }

      - name: Check for existing Upstream SHA issue
        id: check_sha_issue
        uses: actions/github-script@v7
        env:
          LATEST_SHA: ${{ steps.get_commit.outputs.latest_sha }}
        with:
          script: |
            const latestSha = process.env.LATEST_SHA;
            if (!latestSha) {
              core.setOutput('exists', 'false');
              return;
            }
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 10
            });
            const exists = issues.some(issue => issue.title === `Upstream SHA: ${latestSha}`);
            core.setOutput('exists', exists ? 'true' : 'false');

      - name: Open issue if new commit
        if: ${{ steps.get_commit.outputs.latest_sha != '' && steps.get_commit.outputs.latest_sha != 'null' && (steps.get_last_sha.outputs.last_sha == '' || steps.get_commit.outputs.latest_sha != steps.get_last_sha.outputs.last_sha) && steps.check_sha_issue.outputs.exists == 'false' }}
        uses: actions/github-script@v7
        env:
          LATEST_SHA: ${{ steps.get_commit.outputs.latest_sha }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latestSha = process.env.LATEST_SHA;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Upstream SHA: ${latestSha}`,
              body: `A new commit (${latestSha}) was pushed to neodrama/github-drama.\n\nSee: https://github.com/neodrama/github-drama/commit/${latestSha}`
            });

      - name: Update or create tracker issue
        if: ${{ steps.get_commit.outputs.latest_sha != '' && steps.get_commit.outputs.latest_sha != 'null' && (steps.get_last_sha.outputs.last_sha == '' || steps.get_commit.outputs.latest_sha != steps.get_last_sha.outputs.last_sha) }}
        uses: actions/github-script@v7
        env:
          LATEST_SHA: ${{ steps.get_commit.outputs.latest_sha }}
          ISSUE_NUMBER: ${{ steps.get_last_sha.outputs.issue_number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latestSha = process.env.LATEST_SHA;
            const issueNumber = process.env.ISSUE_NUMBER;
            const trackerBody = `Last seen SHA: ${latestSha}`;
            if (issueNumber && issueNumber !== 'undefined' && issueNumber !== '') {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(issueNumber),
                body: trackerBody,
                labels: ['Upstream Commit Tracker']
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Upstream Commit Tracker',
                body: trackerBody,
                labels: ['Upstream Commit Tracker']
              });
            }